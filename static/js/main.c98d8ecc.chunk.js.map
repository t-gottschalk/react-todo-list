{"version":3,"sources":["components/Header/Header.js","components/About/About.js","components/TodoItem/TodoItem.js","components/Todos/Todos.js","components/AddTodo/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Link","to","About","TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","handleComplete","bind","checked","onClick","handleDelete","float","aria-hidden","Component","Todos","todos","map","key","AddTodo","onSubmit","e","preventDefault","handleAdd","state","setState","target","value","name","flex","placeholder","App","axios","delete","then","res","filter","newTodo","uuid","v4","get","data","Route","exact","path","render","Fragment","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uYAwBeA,G,MApBA,WACX,OACI,4BAAQC,UAAU,gBACd,sDACA,kBAACC,EAAA,EAAD,CACID,UAAU,aAEVE,GAAG,KAHP,QAFJ,IAQI,kBAACD,EAAA,EAAD,CACID,UAAU,aAEVE,GAAG,UAHP,YCHGC,EATD,WACV,OACI,6BACE,qCACA,gEC+BKC,EAlCf,2MACIC,SAAW,WACP,MAAO,CACHC,WAAY,UACZC,QAAS,OACTC,aAAc,kBACdC,eAAgB,EAAKC,MAAMC,KAAKC,UAAY,eAAiB,SANzE,wEAUc,IAAD,EAC4BC,KAAKH,MAAMC,KAApCG,EADH,EACGA,GAAIC,EADP,EACOA,MAAOH,EADd,EACcA,UACnB,OACI,yBAAKI,MAAQH,KAAKR,YACd,2BACI,2BAAOY,KAAK,WAAWC,SAAWL,KAAKH,MAAMS,eAAeC,KAAKP,KAAMC,GAAMO,QAAUT,EAAY,UAAW,KAAO,IACpHG,EACD,4BAAQO,QAAST,KAAKH,MAAMa,aAAaH,KAAKP,KAAMC,GAAKE,MAAO,CAAEQ,MAAO,UACrE,uBAAGxB,UAAU,cAAcyB,cAAY,gBAlB/D,GAA8BC,aCiBfC,E,iLAdD,IAAD,OACL,OAAOd,KAAKH,MAAMkB,MAAMC,IAAI,SAAClB,GAAD,OACxB,kBAAC,EAAD,CAAUmB,IAAKnB,EAAKG,GAAIH,KAAQA,EAAMQ,eAAgB,EAAKT,MAAMS,eAAgBI,aAAc,EAAKb,MAAMa,qB,GAHlGG,aCuCLK,G,MAxCf,YACI,WAAYrB,GAAQ,IAAD,8BACf,4CAAMA,KAMVsB,SAAW,SAACC,GACRA,EAAEC,iBACF,EAAKxB,MAAMyB,UAAU,EAAKC,MAAMrB,OAChC,EAAKsB,SAAS,CAAEtB,MAAO,MAVR,EAanBG,SAAW,SAACe,GAAD,OAAO,EAAKI,SAAS,CAAEtB,MAAOkB,EAAEK,OAAOC,SAX9C,EAAKH,MAAQ,CACTrB,MAAO,IAHI,EADvB,sEAiBQ,OACI,0BAAMf,UAAU,WAAWgC,SAAUnB,KAAKmB,UACtC,2BACIf,KAAK,OACLuB,KAAK,QACLxB,MAAO,CAACyB,KAAM,KAAMlC,QAAS,OAC7BmC,YAAY,cACZH,MAAO1B,KAAKuB,MAAMrB,MAClBG,SAAUL,KAAKK,WAEnB,4BAAQD,KAAK,SAASjB,UAAU,OAAhC,eA3BhB,GAA6B0B,cCwEdiB,G,kBA7Db,aAAe,IAAD,8BACZ,+CAWFxB,eAAiB,SAACL,GAChB,EAAKuB,SAAS,CACZT,MAAO,EAAKQ,MAAMR,MAAMC,IAAI,SAAAlB,GAG1B,OAFGA,EAAKG,KAAOA,IACbH,EAAKC,WAAaD,EAAKC,WAClBD,OAjBC,EAuBdY,aAAe,SAACT,GACd8B,IAAMC,OAAN,qDAA2D/B,IACxDgC,KAAK,SAAAC,GAAG,OAAI,EAAKV,SAAS,CAAET,MAAM,YAAK,EAAKQ,MAAMR,MAAMoB,OAAO,SAAArC,GAAI,OAAIA,EAAKG,KAAOA,UAzB1E,EA6BdqB,UAAY,SAACpB,GACX,IAAMkC,EAAU,CACdnC,GAAIoC,IAAKC,KACTpC,MAAOA,EACPH,WAAW,GAEb,EAAKyB,SAAS,CAAET,MAAM,GAAD,mBAAM,EAAKQ,MAAMR,OAAjB,CAAwBqB,OAjC7C,EAAKb,MAAQ,CACXR,MAAO,IAHG,E,iFAOO,IAAD,OAClBgB,IAAMQ,IAAI,wDACPN,KAAK,SAAAC,GAAG,OAAI,EAAKV,SAAS,CAAET,MAAOmB,EAAIM,W,+BA8BlC,IAAD,OACP,OACE,kBAAC,IAAD,KACE,yBAAKrD,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,6BACA,kBAACsD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAA/C,GAAK,OACjC,kBAAC,IAAMgD,SAAP,KACE,kBAAC,EAAD,CAASvB,UAAW,EAAKA,YACzB,kBAAC,EAAD,CAAOP,MAAO,EAAKQ,MAAMR,MAAOT,eAAkB,EAAKA,eAAgBI,aAAc,EAAKA,mBAI9F,kBAAC+B,EAAA,EAAD,CAAOE,KAAK,SAASG,UAAWxD,W,GAtD1BuB,c,MCFEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.c98d8ecc.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.css';\n\nconst Header = () => {\n    return (\n        <header className='header-style'>\n            <h1>A Fun React Todo List!</h1>\n            <Link \n                className='link-style'\n                \n                to=\"/\">Home\n            </Link>\n             | \n            <Link \n                className='link-style'\n                \n                to=\"/about\">About\n            </Link>\n        </header>\n    )\n};\n\n\nexport default Header;\n","import React from 'react';\n\nconst About = () => {\n    return (\n        <div>\n          <h1>About</h1>\n          <p>This is the TodoList app v1.0.0</p>\n        </div>\n    );\n}\n\nexport default About;\n","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n    getStyle = () => {\n        return {\n            background: '#F4F4F4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none',\n        }\n    };\n\n    render() {\n        const { id, title, completed } = this.props.todo;\n        return (\n            <div style={ this.getStyle() }>\n                <p>\n                    <input type=\"checkbox\" onChange={ this.props.handleComplete.bind(this, id) } checked={ completed ? 'checked': '' }/>{' '}\n                    {title}\n                    <button onClick={this.props.handleDelete.bind(this, id)} style={{ float: 'right' }}>\n                        <i className=\"fa fa-trash\" aria-hidden=\"true\"></i>\n                    </button>\n                </p>\n            </div>\n        )\n    }\n}\n\n// PropTypes\n// TodoItem.PropTypes = {\n//     todos: PropTypes.object.isRequired,\n//     handleComplete: PropTypes.func.isRequired,\n//     handleDeleteTodo: PropTypes.func.isRequired\n// }\n\n\nexport default TodoItem;","import React, { Component } from \"react\";\n// import PropTypes from 'prop-types';\n\nimport TodoItem from '../TodoItem/TodoItem';\n\nclass Todos extends Component {\n    render() {\n        return this.props.todos.map((todo) => (\n            <TodoItem key={todo.id} todo = {todo} handleComplete={this.props.handleComplete} handleDelete={this.props.handleDelete}/>\n        ));\n    }\n}\n\n// PropTypes\n// Todos.PropTypes = {\n//     todos: PropTypes.array.isRequired,\n//     handleComplete: PropTypes.func.isRequired,\n//     handleDelete: PropTypes.func.isRequired\n// }\n\nexport default Todos;","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport './AddTodo.css';\n\nexport class AddTodo extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: ''\n        }\n    }\n    \n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.handleAdd(this.state.title);\n        this.setState({ title: '' });\n    }\n\n    onChange = (e) => this.setState({ title: e.target.value });\n\n    render() {\n        return (\n            <form className='add-todo' onSubmit={this.onSubmit}>\n                <input \n                    type=\"text\" \n                    name=\"title\"\n                    style={{flex: '10', padding: '5px'}}\n                    placeholder=\"Add Todo...\" \n                    value={this.state.title}\n                    onChange={this.onChange}\n                />\n                <button type=\"submit\" className=\"btn\">\n                    Submit\n                </button>\n            </form>\n        );\n    }\n}\n\n// PropTypes\n// handleAdd.PropTypes = {\n//     handleAdd: PropTypes.func.isRequired\n// }\n\nexport default AddTodo;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport uuid from 'uuid';\n\n// Importing React-Router\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\n// Importing Components\nimport Header from './components/Header/Header';\nimport About from './components/About/About';\nimport Todos from './components/Todos/Todos';\nimport AddTodo from './components/AddTodo/AddTodo';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: []\n    }\n  }\n  \n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n      .then(res => this.setState({ todos: res.data }));\n  }\n  \n  handleComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if(todo.id === id)\n          todo.completed = !todo.completed;\n        return todo;\n      })\n    });\n  }\n  // Note above, 'handleComplete(id)' = 'markComplete()'\n\n  handleDelete = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)]}));\n  }\n  // Note above, 'handleDelete(id)' = 'delTodo()'\n\n  handleAdd = (title) => {\n    const newTodo = {\n      id: uuid.v4(),\n      title: title,\n      completed: false\n    }\n    this.setState({ todos: [...this.state.todos, newTodo]})\n  }\n  // Note above, 'handleAdd(title)' = 'addTodo()'\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <br />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddTodo handleAdd={this.handleAdd} />\n                <Todos todos={this.state.todos} handleComplete = {this.handleComplete} handleDelete={this.handleDelete}/>\n              </React.Fragment>\n            )} />\n\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}