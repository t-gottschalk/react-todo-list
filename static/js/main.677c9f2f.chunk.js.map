{"version":3,"sources":["components/Header/Header.js","components/AddTodo/AddTodo.js","components/TodoItem/TodoItem.js","components/Todos/Todos.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","AddTodo","props","onSubmit","e","preventDefault","handleAdd","state","title","setState","onChange","target","value","this","type","name","style","flex","padding","placeholder","Component","TodoItem","getStyle","background","borderBottom","textDecoration","todo","completed","id","handleComplete","bind","checked","onClick","handleDelete","float","aria-hidden","Todos","todos","map","key","App","axios","delete","then","res","filter","newTodo","uuid","v4","get","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.677c9f2f.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <header className='header-style'>\n      <h1>A Fun React Todo List!</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\nimport './AddTodo.css';\n\nexport class AddTodo extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            title: ''\n        }\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.handleAdd(this.state.title);\n        this.setState({ title: '' });\n    }\n\n    onChange = (e) => this.setState({ title: e.target.value });\n\n    render() {\n        return (\n            <form className='add-todo' onSubmit={this.onSubmit}>\n                <input \n                    type=\"text\" \n                    name=\"title\"\n                    style={{flex: '10', padding: '5px'}}\n                    placeholder=\"Add Todo...\" \n                    value={this.state.title}\n                    onChange={this.onChange}\n                />\n                <button type=\"submit\">\n                    Submit\n                </button>\n            </form>\n        );\n    }\n}\n\n// PropTypes\n// handleAdd.PropTypes = {\n//     handleAdd: PropTypes.func.isRequired\n// }\n\nexport default AddTodo;\n","import React, { Component } from 'react';\nimport './TodoItem.css';\n// import PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n    getStyle = () => {\n        return {\n            background: '#F4F4F4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none',\n        }\n    };\n\n    render() {\n        const { id, title, completed } = this.props.todo;\n        return (\n            <div className='todo-item' style={ this.getStyle() }>\n                <p>\n                    <input \n                        type=\"checkbox\" \n                        onChange={ this.props.handleComplete.bind(this, id) } \n                        checked={ completed ? 'checked': '' }\n                    />\n                    {' '} {title}\n                    <button \n                        onClick={this.props.handleDelete.bind(this, id)} \n                        style={{ float: 'right' }}>\n                        <i \n                            className=\"fa fa-trash\" \n                            aria-hidden=\"true\"\n                        >\n                        </i>\n                    </button>\n                </p>\n            </div>\n        )\n    }\n}\n\n// PropTypes\n// TodoItem.PropTypes = {\n//     todos: PropTypes.object.isRequired,\n//     handleComplete: PropTypes.func.isRequired,\n//     handleDeleteTodo: PropTypes.func.isRequired\n// }\n\nexport default TodoItem;\n","import React, { Component } from \"react\";\nimport TodoItem from '../TodoItem/TodoItem';\nimport './Todos.css';\n// import PropTypes from 'prop-types';\n\nclass Todos extends Component {\n  render() {\n    return this.props.todos.map(todo => (\n        <TodoItem \n        \tkey={todo.id} \n        \ttodo = {todo} \n        \thandleComplete={this.props.handleComplete} \n        \thandleDelete={this.props.handleDelete}\n        />\n    ));\n  }\n}\n\n// PropTypes\n// Todos.PropTypes = {\n//     todos: PropTypes.array.isRequired,\n//     handleComplete: PropTypes.func.isRequired,\n//     handleDelete: PropTypes.func.isRequired\n// }\n\nexport default Todos;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport uuid from 'uuid';\nimport Header from './components/Header/Header';\nimport AddTodo from './components/AddTodo/AddTodo';\nimport Todos from './components/Todos/Todos';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: []\n    }\n  }\n  \n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=1')\n      .then(res => this.setState({ todos: res.data }));\n  }\n  \n  handleComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if(todo.id === id)\n          todo.completed = !todo.completed;\n        return todo;\n      })\n    });\n  }\n\n  handleDelete = (id) => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then(res => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)]}));\n  }\n\n  handleAdd = (title) => {\n    const newTodo = {\n      id: uuid.v4(),\n      title: title,\n      completed: false\n    }\n    this.setState({ todos: [...this.state.todos, newTodo]})\n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n          <Header />\n          <br />\n          <AddTodo handleAdd={this.handleAdd} />\n          <Todos \n            todos={this.state.todos} \n            handleComplete = {this.handleComplete} \n            handleDelete={this.handleDelete}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}